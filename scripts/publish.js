const ExpoConfig = require("@expo/config");
const fs = require("fs-extra");
const path = require("path");
const { execSync } = require("child_process");
const yargs = require("yargs/yargs");
const { hideBin } = require("yargs/helpers");

const argv = yargs(hideBin(process.argv)).options({
  "project-path": {
    alias: "p",
    type: "string",
    demandOption: true,
    describe: "Path to the Expo project to publish.",
  },
  "runtime-version": {
    alias: "r",
    type: "string",
    demandOption: true,
    describe: "The runtime version for the update.",
  },
}).argv;

function publish() {
  const { projectPath, runtimeVersion } = argv;

  if (!fs.existsSync(projectPath)) {
    console.error(`Error: Project path does not exist: ${projectPath}`);
    process.exit(1);
  }

  const projectDir = path.resolve(projectPath);
  const serverDir = path.resolve(__dirname, "..");

  console.log(`Publishing update for project: ${projectDir}`);
  console.log(`Platform: android`);
  console.log(`Runtime Version: ${runtimeVersion}`);

  console.log('\nRunning "npx expo export" for Android...');
  // This runs in your current OS (Windows), which is fine.
  execSync("npx expo export -p android", { cwd: projectDir, stdio: "inherit" });

  const exportDistPath = path.join(projectDir, "dist");
  if (!fs.existsSync(exportDistPath)) {
    console.error(
      `Error: "dist" folder not found after export. Check for errors above.`
    );
    process.exit(1);
  }

  const timestamp = Date.now();
  // This uses the native path separator (e.g., '\' on Windows) to create the local folder, which is correct.
  const updateDirectory = path.join(
    serverDir,
    "updates",
    runtimeVersion,
    String(timestamp)
  );

  console.log(`\nCreating update directory: ${updateDirectory}`);
  fs.ensureDirSync(updateDirectory);

  console.log(
    `Copying exported files from ${exportDistPath} to ${updateDirectory}`
  );
  fs.copySync(exportDistPath, updateDirectory);

  // THE CRITICAL STEP: Sanitize the metadata generated by Windows.
  const metadataPath = path.join(exportDistPath, "metadata.json");
  if (fs.existsSync(metadataPath)) {
    console.log("Sanitizing paths in metadata.json for Linux compatibility...");
    const metadata = fs.readJsonSync(metadataPath);

    // Force forward slashes ('/') for all paths inside the JSON file.
    // This makes the file platform-agnostic before we commit it.
    metadata.fileMetadata.android.bundle =
      metadata.fileMetadata.android.bundle.replace(/\\/g, "/");
    metadata.fileMetadata.android.assets.forEach((asset) => {
      asset.path = asset.path.replace(/\\/g, "/");
    });

    // Save the sanitized metadata to the final update directory.
    fs.writeJsonSync(path.join(updateDirectory, "metadata.json"), metadata, {
      spaces: 2,
    });
  }

  console.log("Extracting public Expo config...");
  const { exp } = ExpoConfig.getConfig(projectDir, {
    skipSDKVersionRequirement: true,
    isPublicConfig: true,
  });
  const expoConfigPath = path.join(updateDirectory, "expoConfig.json");
  fs.writeJsonSync(expoConfigPath, exp, { spaces: 2 });
  console.log(`Saved public config to ${expoConfigPath}`);

  console.log("\nâœ… Publish complete!");
}

publish();
